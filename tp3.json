/*
ITP3: Evitar ramas activas sin Pull Request 
Descripción:

Para mantener un flujo de trabajo basado en metodologías ágiles es importante que haya pull requests constantemente. Por ello, esta ITP se centra en ver si hay ramas activas sin tener ninguna solicitud de pull request.

Métricas:

NRAI: Número de ramas activas por parte del miembro (ha hecho algún push durante periodo PMVTP3) que tengan una Pull Request (abierta o cerrada) durante el periodo PMVTP3.
NRATI: Número de ramas activas totales del miembro durante el periodo xTP3.

Objetivo:
NRAINRATI = UTP3
Cada PMVTP3 por Miembro


Parámetros:

PMVTP3= 1 sprint
UTP3= 1

PMVTP3 representaría el periodo de “máximo” de vida que esperamos de una rama activa.
UTP3 sería el umbral en tanto por uno de casos de margen de error.
*/


/*

query {
  repository(owner: "Antoniiosc7", name: "tp-testbench") {
    refs(refPrefix: "refs/heads/", first: 100) {
      nodes {
        name
        target {
          ... on Commit {
            history(first: 1) {
              edges {
                node {
				  committedDate
                }
              }
            }
          }
        }
      }
    }
  }
}
*/

{
  "config": {
    "scopeManager": "http://host.docker.internal:5700/api/v1/scopes/development"
  },
  "metric": {
    "computing": "actual",
    "element": "number",
    "event": {
      "githubGQL": {
        "custom": {
          "type": "graphQL",
          "title": "Get closed pull requests",
          "steps": {
            "0": {
              "type": "queryGetObject",
              "query": "{\n  repository(owner: \"Antoniiosc7\", name: \"tp-testbench\") {\n    refs(refPrefix: \"refs/heads/\", first: 100) {\n      nodes {\n        name\n        target {\n          ... on Commit {\n            history(first: 1) {\n              edges {\n                node {\n                  committedDate\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"            },
            "1": {
              "type": "objectGetSubObjects",
              "location": "data.repository.refs.nodes"
            },
            "2": {
              "type": "runScript",
              "variables": {},
              "script": "module.exports.generic = function getPullRequests(inputData,variables)  {\r\n    let pullRequestsMergedAndOpen = []\r\n    for (let pullRequest of inputData) {\r\n\r\n        if (pullRequest.author.login === 'Antoniiosc7') continue;\r\n\r\n        if (pullRequest.state === 'OPEN' || pullRequest.state === 'MERGED' && Math.max(new Date(variables.from), new Date(pullRequest.createdAt)) <= Math.min(new Date(variables.to), new Date(pullRequest.mergedAt))) {\r\n            pullRequestsMergedAndOpen.push(pullRequest)\r\n        }\r\n    }\r\n\r\n    return pullRequestsMergedAndOpen;\r\n}"
            }
          }
        }
      }
    },
    "scope": {
      "project": "TFG-GH-antoniiosc7_Glassmatrix",
      "class": "TFG",
      "member": "*"
    },
    "window": {
      "type": "static",
      "period": "hourly",
      "initial": "2024-05-12T17:00:00.000Z",
      "from": "2024-05-12T17:00:00.000Z",
      "end": "2024-05-13T17:59:00.000Z",
      "timeZone": "America/Los_Angeles"
    }
  }
}