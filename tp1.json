/*
CTP1: Evitar pull request de tamaño excesivo
Descripción:

Evaluar el tamaño de las solicitudes de fusión es esencial para garantizar un proceso de revisión de código eficiente. Esta CTP se centra en medir el tamaño de cada solicitud de fusión. Se asume que se debe intentar dividir lo más posible las tareas de forma que se puedan completar lo más rápido posible disponiendo de un tamaño reducido.

Requisitos previos: 

El equipo sigue un proceso formal de revisión de código.
El equipo debe establecer qué porcentaje máximo de cambio en el código se considerará aceptable en una Pull Request (en adelante, PR) y qué porcentaje de casos podrán sobrepasar esta medida.

Métricas:

NPRMT: Número de pull request del equipo a la semana que cumplan que el número de líneas de código cambiadas (creadas, modificadas o borradas) sea menor al umbral PMTP1.
NPRT: Número de pull request del equipo a la semana.
Objetivo:
NPRM TNPRT100 UTP1
Semanalmente por Equipo


Parámetros:

PMTP1= 200 líneas
UTP1= 90

PMTP1 representaría el número de líneas máximas a modificar en una pull request. Esto dependerá de las políticas y preferencias de tu equipo.
UTP1 sería el umbral de porcentaje de casos en los que se espera que se cumpla la condición anterior. Esto nuevamente dependerá de las políticas del equipo de trabajo.

*/

{
    "config": {
      "scopeManager": "http://host.docker.internal:5700/api/v1/scopes/development"
    },
    "metric": {
      "computing": "actual",
      "element": "number",
      "event": {
        "githubGQL": {
          "custom": {
            "type": "graphQL",
            "title": "Get closed pull requests",
            "steps": {
              "0": {
                "type": "queryGetObject",
                "query": "{\r\n  repository(name: \"%PROJECT.github.repository%\", owner: \"%PROJECT.github.repoOwner%\") {\r\n    pullRequests(first: 100) {\r\n      pageInfo {\r\n        endCursor\r\n        hasNextPage\r\n      }\r\n      nodes {\r\n        bodyText\r\n        number\r\n        state\r\n        createdAt\r\n        author {\r\n          login\r\n        }\r\n        mergedAt\r\n        mergedBy {\r\n          login\r\n        }\r\n        additions\r\n        comments(first: 50) {\r\n          nodes {\r\n            author {\r\n              login\r\n            }\r\n            bodyText\r\n            createdAt\r\n          }\r\n        }\r\n        reviews(first: 30) {\r\n          nodes {\r\n            state\r\n            createdAt\r\n            bodyText\r\n            author {\r\n              login\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
              },
              "1": {
                "type": "objectGetSubObjects",
                "location": "data.repository.pullRequests.nodes"
              },
              "2": {
                "type": "runScript",
                "variables": {},
                "script": "module.exports.generic = function getPullRequests(inputData,variables)  {\r\n    let pullRequestsMergedAndOpen = []\r\n    for (let pullRequest of inputData) {\r\n\r\n        if (pullRequest.author.login === '%MEMBER.github.username%') continue;\r\n\r\n        if (pullRequest.state === 'OPEN' || pullRequest.state === 'MERGED' && Math.max(new Date(variables.from), new Date(pullRequest.createdAt)) <= Math.min(new Date(variables.to), new Date(pullRequest.mergedAt))) {\r\n            pullRequestsMergedAndOpen.push(pullRequest)\r\n        }\r\n    }\r\n\r\n    return pullRequestsMergedAndOpen;\r\n}"
              }
            }
          }
        }
      },
      "scope": {
        "project": "TFG-GH-antoniiosc7_Glassmatrix",
        "class": "TFG",
        "member": "*"
      },
      "window": {
        "type": "static",
        "period": "hourly",
        "initial": "2024-05-12T17:00:00.000Z",
        "from": "2024-05-12T17:00:00.000Z",
        "end": "2024-05-13T17:59:00.000Z",
        "timeZone": "America/Los_Angeles"
      }
    }
  }