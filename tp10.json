/*
CTP10: Evitar que las P/R estén sin revisor durante mucho tiempo
Descripción:

Fomentar que los desarrolladores siguen a un revisor de la Pull Request en el mismo momento en el que se abre dicha P/R.

Requisitos previos: 

Se llevan a cabo revisiones de código en el proceso de desarrollo.
El equipo utiliza un sistema de gestión de solicitudes de pull requests.
Se abre una pull request.

Métricas:

NPR (Number of PR): Número de pull request realizados en la rama principal.
NPRW: (Number of PR without reviewer): Número de pull request que estuvieron sin revisor los primeros .

Objetivo:
NPRWNPR x 100 ≤ UTP10
Semanalmente por Equipo


Parámetros:

UTP10 = 10%
MTWRTP10 = 10mins

UT10: representa el umbral de porcentaje máximo de P/R que se han creado sin tener a un revisor asignado
MTWRTP10 (Maximum time without reviewer): Representa el máximo tiempo que puede estar un P/R sin revisor desde que se crea.
*/


{
  "config": {
    "scopeManager": "http://host.docker.internal:5700/api/v1/scopes/development"
  },
  "metric": {
    "computing": "actual",
    "element": "number",
    "event": {
      "githubGQL": {
        "custom": {
          "type": "graphQL",
          "title": "Get pull requests without reviewer in the first minutes",
          "steps": {
            "0": {
              "type": "queryGetObject",
              "query": "{\r\n  repository(name: \"%PROJECT.github.repository%\", owner: \"%PROJECT.github.repoOwner%\") {\r\n    pullRequests(first: 100) {\r\n      pageInfo {\r\n        endCursor\r\n        hasNextPage\r\n      }\r\n      nodes {\r\n        bodyText\r\n        number\r\n        state\r\n        createdAt\r\n        author {\r\n          login\r\n        }\r\n        mergedAt\r\n        mergedBy {\r\n          login\r\n        }\r\n        additions\r\n        comments(first: 50) {\r\n          nodes {\r\n            author {\r\n              login\r\n            }\r\n            bodyText\r\n            createdAt\r\n          }\r\n        }\r\n        reviews(first: 30) {\r\n          nodes {\r\n            state\r\n            createdAt\r\n            bodyText\r\n            author {\r\n              login\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
            },
            "1": {
              "type": "objectGetSubObjects",
              "location": "data.repository.pullRequests.nodes"
            },
            "2": {
              "type": "runScript",
              "variables": {},
              "script": "module.exports.generic = function getPullRequestsWithoutReviewer(inputData,variables)  {\r\n    let pullRequestsWithoutReviewer = []\r\n    for (let pullRequest of inputData) {\r\n\r\n        if (pullRequest.author.login === '%MEMBER.github.username%') continue;\r\n\r\n        if (pullRequest.state === 'OPEN' && pullRequest.reviews.nodes.length === 0 && (new Date() - new Date(pullRequest.createdAt)) / 60000 <= variables.MTWRTP10) {\r\n            pullRequestsWithoutReviewer.push(pullRequest)\r\n        }\r\n    }\r\n\r\n    return pullRequestsWithoutReviewer;\r\n}"
            }
          }
        }
      }
    },
    "scope": {
      "project": "TFG-GH-antoniiosc7_Glassmatrix",
      "class": "TFG",
      "member": "*"
    },
    "window": {
      "type": "static",
      "period": "hourly",
      "initial": "2024-05-12T17:00:00.000Z",
      "from": "2024-05-12T17:00:00.000Z",
      "end": "2024-05-13T17:59:00.000Z",
      "timeZone": "America/Los_Angeles"
    }
  }
}

/* GQL:
 La API de GitHub GraphQL no proporciona un campo createdAt para los ReviewRequest,
 lo que significa que no podemos obtener directamente el momento en que se asignó un revisor
 a una pull request a través de la API de GitHub GraphQL.

query {
  repository(name: "tp-testbench", owner: "antoniiosc7") {
    pullRequests(first: 100, states: OPEN) {
      nodes {
        title
        number
        createdAt
        reviewRequests(first: 100) {
          nodes {
            requestedReviewer {
              __typename
              ... on User {
                login
              }
            }
          }
        }
      }
    }
  }
}
*/